<?php
/**
 * @file
 */

define('REALTY_FRONT_THEME_PATH', drupal_get_path('theme', 'realty_theme'));

/*
 * implement hook_init.
 */
function realty_init() {

  drupal_add_js(array('REALTY_FRONT_THEME_PATH' => REALTY_FRONT_THEME_PATH), 'setting');
  $object = menu_get_object('taxonomy_term', 2);

  if (current_path() == '<front>') {
    if (!drupal_is_cli()) {
      drupal_goto('taxonomy/term/1');
    }
  }

  if (!empty($object) && $object->vid == 1) {
    drupal_add_js(array(
      'id' => 'index',
      'city' => $object->tid, ), 'setting');
  }

}

/*
 * Implement hook_taxonomy_term_insert.
 */
function realty_taxonomy_term_insert($term) {
  if ($term->vid == '6' ) {
      $place = json_decode($term->field_map['und'][0]['placemarks']);
      $place[0]->params->tid = $term->tid;
      $term->field_map['und'][0]['placemarks'] = json_encode($place);
      taxonomy_term_save($term);
  }
}

/*
 * Implement hook_taxonomy_term_presave.
 */
function realty_taxonomy_term_presave($term) {
  if ($term->tid) {
    $place = json_decode($term->field_map['und'][0]['placemarks']);
    $place[0]->params->tid = $term->tid;
    $term->field_map['und'][0]['placemarks'] = json_encode($place);
  }
}

/**
 * get the path to the directory /files
 */

function realty_file_directory_path() {
  return variable_get('file_directory_path', conf_path() . '/files');
}

/*
 * implement hook_menu.
 */
function realty_menu() {

  $item['get_developer_complex'] = array(
    'title' => 'complex',
    'page callback' => 'realty_get_developer_complex',
    'access callback' => TRUE,
  );

  $item['get_id_apartment'] = array(
    'page callback' => 'realty_get_id_apartment',
    'access callback' => TRUE,
  );

  $item['apartment_comparison'] = array(
    'page callback' => 'realty_apartment_comparison',
    'access callback' => TRUE,
  );

  $item['search_map'] = array(
    'page callback' => 'realty_search_map',
    'access callback' => TRUE,
  );

  $item['get_data_complex'] = array(
    'page callback' => 'realty_get_data_complex',
    'access callback' => TRUE,
  );

  $item['apartment_signal'] = array(
    'page callback' => 'realty_apartment_signal',
    'access callback' => TRUE,
  );

  $item['realty_add_comment'] = array(
    'page callback' => 'realty_add_comment',
    'access callback' => TRUE,
  );

  $item['edit_user_profile'] = array(
    'page callback' => 'realty_edit_user_profile',
    'access callback' => TRUE,
  );

  $item['apartment/booking'] = array(
    'page callback' => 'realty_apartment_booking',
    'access callback' => TRUE,
  );

  return $item;
}

/**
 * Implements hook_menu().
 */

function realty_theme() {

  $base = array(
    'file' => 'theme.inc',
    'path' => drupal_get_path('module', 'realty') . '/theme',
  );

  $items['search_form'] = array(
    'template' => 'search-form',
    'render element' => 'form',
  );

  $items['realty_user_menu'] = array(
    'template' => 'realty-user-menu',
    'variables' => array(
      'account' => NULL,
    ),
  );

  $items['realty_user_profile_form'] = $base + array(
    'template' => 'realty-user-profile-form',
    'render element' => 'form',
  );

  $items['realty_modal_search_form'] = array(
    'template' => 'realty-modal-search-form',
  );

  $items['id_apartment_pdf'] = $base + array(
    'template' => 'realty-id-apartment-pdf',
    'preprocess functions' => array('realty_preprocess_realty_id_apartment_pdf'),
    'variables' => array(
      'node' => NULL,
    ),
  );

  $items['sending_messages'] = $base + array(
    'template' => 'realty-sending-messages',
    'variables' => array('node' => NULL),
  );

  $items['booking_request'] = $base + array(
    'template' => 'realty-booking-request',
    'preprocess functions' => array('realty_preprocess_realty_booking_request'),
    'variables' => array('node' => NULL),
  )
  ;
  $items['realty_comment_form'] = array(
    'render element' => 'form',
    'template' => 'realty-comment-form',
  );

  $items['realty_views_exposed_form'] = $base + array(
    'render_element' => 'form',
    'template' => 'realty-views-exposed-form',
  );

  $items['realty_main_search_form'] = $base + array(
    'render_element' => 'form',
    'template' => 'realty-main-search-form'
  );

  $items['realty_modal_user_login'] = array(
    'template' => 'realty-modal-user-login',
  );

  $items['realty_user_login_form'] = $base + array(
    'render_element' => 'form',
    'template' => 'realty-user-login-form',
  );

  $items['realty_user_register_form'] = $base + array(
      'file' => 'theme.inc',
      'render_element' => 'form',
      'template' => 'realty-user-register-form'
    );

  $items['realty_booking_apartment_form'] = array(
    'render element' => 'form',
    'arguments' => array('form' => NULL),
    'preprocess functions' => array('realty_theme_preprocess_realty_booking_apartment_form'),
    'template' => 'realty-booking-apartment-form'
  );

  return $items;

}

/**
 * the creation of a node type booking.
 */
function realty_creation_node_booking($array_options) {
  global $user;

  $count_booking = count(views_get_view_result('booking', 'all_booking'));
  $count_booking++;
  $manager = field_collection_item_load($array_options['manager']);

  $node = new stdClass();
  $node->type = 'booking';
  node_object_prepare($node);
  $node->title = 'Бронирование №' . $count_booking;
  $node->language = LANGUAGE_NONE;
  $node->body[LANGUAGE_NONE][0]['value'] = '';
  $node->field_booking_apartment[LANGUAGE_NONE][0]['target_id'] = $array_options['apartment'];
  $node->field_booking_user[LANGUAGE_NONE][0]['target_id'] = $user->uid;
  $node->field_booking_numbers[LANGUAGE_NONE][0]['value'] =  $count_booking;
  $node->field_booking_name[LANGUAGE_NONE][0]['value'] = $array_options['name'];
  $node->field_booking_number_phone[LANGUAGE_NONE][0]['value'] = $array_options['number_phone'];
  $node->field_booking_email[LANGUAGE_NONE][0]['value'] = $array_options['email'];
  $node->field_booking_manager = $manager->field_manager_name;
  $node->field_email_manager[LANGUAGE_NONE][0]['value'] = $manager->field_manager_e_mail[LANGUAGE_NONE][0]['value'];
  $node->field_method_purchase[LANGUAGE_NONE][0]['value'] = $array_options['payment'];
  if ($array_options['payment'] == 2) {
    $node->field_number_contract[LANGUAGE_NONE][0]['value'] = $array_options['number_contract'];
    $node->field_sum[LANGUAGE_NONE][0]['value'] = $array_options['sum'];
    $node->field_bank_name[LANGUAGE_NONE][0]['value'] = $array_options['bank_name'];
  }
  $node->uid = 1;

  $filepath = 'public://booking_documents';
  file_prepare_directory($filepath, FILE_CREATE_DIRECTORY);

  $files_count = count($array_options['documents']);
  for ($i = 0; $i < $files_count; $i++) {
    $path = $array_options['documents'][$i]['tmppath'];
    $name = $array_options['documents'][$i]['name'];
    $file = (object)array(
      'uid' => $user->uid,
      'uri' => $path,
      'filemime' => file_get_mimetype($path),
      'display' => 1,
      'status' => 1
    );
    if ($file = file_copy($file, $filepath . '/' . $name)) {
      drupal_set_message('Success');
    }
    else {
      drupal_set_message('Error', 'error');
    }
    $node->field_booking_document[LANGUAGE_NONE][$i] = (array)$file;
  }
  $node->status = 1;
  $node->promote = 1;
  node_save($node);

  return $node;
}

/**
 * Change of status from apartment.
 */
function realty_change_status_apartment($nid) {
  $node = node_load($nid);
  if ($node->field_status[LANGUAGE_NONE][0]['value'] == 1) {
    $node->field_status[LANGUAGE_NONE][0]['value'] = 0;
    node_save($node);
    return TRUE;
  }
  else {
    return FALSE;
  }

}

/**
 * Page callback to /apartment/booking.
 */
function realty_apartment_booking() {
  global $user;

  if ($user->uid != 0 && isset($_GET['nid'])) {
    if (realty_change_status_apartment($_GET['nid']) == TRUE) {
     // realty_creation_node_booking();
    }
  }
  else {
    print 'user';
  }
  drupal_exit();
}

/**
 * Page callback to /realty_add_comment.
 */
function realty_add_comment() {
  global $user;

  if ($_POST['comment'] && $_POST['nid']) {
    $comment = new stdClass();
    $comment->nid = $_POST['nid'];
    $comment->uid = $user->uid;
    $comment->name = $user->name;
    $comment->subject = 'Subject';
    $comment->field_body[LANGUAGE_NONE][0]['value'] = $_POST['comment'];
    $comment->field_body[LANGUAGE_NONE][0]['format'] = NULL;
    $comment->field_body[LANGUAGE_NONE][0]['safe_value'] = $_POST['comment'];
    $comment->hostname = $_SERVER['REMOTE_HOST'] ? $_SERVER['REMOTE_HOST'] : '127.0.0.1';
    $comment->thread = '01/';
    $comment = comment_submit($comment);
    comment_save($comment);
    print TRUE;
    drupal_exit();
  }
  else {
    print FALSE;
    drupal_exit();
  }
}

/**
 * Page callback to /edit_user_profile.
 */
function realty_edit_user_profile() {
  global $user;

  $account = user_load($user->uid);
  if (isset($_POST['name']) && isset($_POST['phone']) && isset($_POST['mail'])) {
    $name = $_POST['name'];
    $phone = $_POST['phone'];
    $mail = $_POST['mail'];

    $account->mail = $mail;
    $account->field_user_name['und'][0]['value'] = $name;
    if ($phone != '00000000') {

    }
    $answer = user_save($account);

    if ($answer->mail == $mail && $answer->field_user_name['und'][0]['value'] == $name) {
      print TRUE;
      drupal_exit();
    }
    else {
      print FALSE;
      drupal_exit();
    }
  }
 }

/**
 * Page callback to /get_data_complex.
 */
function realty_get_data_complex() {

  if ($_POST['nid']) {
    $node = node_load($_POST['nid']);

    $answer['title'] = $node->title;

    $answer['image'] = theme('image', array(
      'path' => $node->field_main_photo['und'][0]['uri'],
      'attributes' => array(
        'class' => array('title-image'),
        ),
      )
    );

    if (!empty($node->field_complex_logo)) {
      $answer['logo'] = theme('image', array(
        'path' => $node->field_complex_logo['und'][0]['uri'],
        'attributes' => array(
          'class' => array('logo-z', 'vertical-logo'),
          ),
        )
      );
    }

    if (!empty($node->field_description)) {
      $answer['description'] = $node->field_description['und'][0]['value'];
    }

    $answer['details'] = l(t('details'), 'node/' . $node->nid, array(
        'attributes' => array('class' => array('button-info', 'button-info-top'),
      )
     )
    );

    print json_encode($answer);
  }

  drupal_exit();
}

/**
 * List all cities.
 */
function realty_get_list_city() {
  $vid = taxonomy_vocabulary_machine_name_load('cities');
  return $terms = taxonomy_get_tree($vid->vid, 0, NULL, TRUE);
}

/**
 * Page callback to /search_map.
 */
function realty_search_map() {

  $areas = $_POST['area'];
  $developers = $_POST['developer'];
  $complexes = $_POST['complex'];
  $categorys = $_POST['category'];
  $stock = $_POST['stock'];

  $view = views_get_view('map');
  $view->set_display('map_city');
  if (!empty($stock)) {
    $view->display_handler->options['filters']['field_stock_value']['value'] = $stock;
  }
  if (!empty($categorys)) {
    foreach ($categorys as $category) {
      $view->display_handler->options['filters']['field_category_value']['value'][] = $category;
    }
  }
  if (!empty($areas)) {
    foreach ($areas as $area) {
      $view->display_handler->options['filters']['field_area_tid']['value'][] = $area;
    }
  }
  if (!empty($developers)) {
    foreach ($developers as $developer) {
      $view->display_handler->options['filters']['field_complex_developer_tid']['value'][] = $developer;
    }
  }
  if (!empty($complexes)) {
    foreach ($complexes as $complex) {
      $view->display_handler->options['filters']['field_home_complex_target_id']['value'][] = $complex;
    }
  }
  $view->pre_execute(array());
  $view->display_handler->preview();
  $view->post_execute();
  if (!empty($view->result)) {
    foreach ($view->result as $key => $tid) {
      $homes[$key]['tid'] = $tid->tid;
      $homes[$key]['address'] = $tid->_field_data['tid']['entity']->field_address_house['und'][0]['value'];
    }
    print json_encode($homes);
  }
  else
    print FALSE;
 }

/**
 * Page callback to /apartment_signal.
 */
function realty_apartment_signal() {
  global $user;

  if ($user->uid != 0) {
    if ($_POST['nid']) {
      if (realty_check_status_apartment_user($user->uid, $_POST['nid']) == TRUE) {
        print TRUE;
        drupal_exit();
      }
      else {
        $node = node_load($_POST['nid']);
        $node->field_user_signal[LANGUAGE_NONE][]['target_id'] = $user->uid;
        field_attach_update('node', $node);
        node_save($node);
        if ($_POST['apartment'] == 0) {
          $dindo = theme('image', array(
            'path' => REALTY_FRONT_THEME_PATH . '/images/dingdongr.svg',
            'attributes' => array(
              'class' => array('dingdong'),
            ),
          ));

          $dindon_r = l($dindo , '#href', array(
            'html' => TRUE,
            'external' => TRUE,
            'attributes' => array(
              'rel' => 'tooltip',
              'data-placement' => 'right',
              'title' => t('Notification will be sent to the withdrawal of reservations'),
            ),
          ));
        }
        else {
          $dindo = theme('image', array(
            'path' => REALTY_FRONT_THEME_PATH . '/images/dingdong_big.svg',
            'attributes' => array(
              'class' => array('bad-button-fix'),
            ),
          ));

          $dindon_r = l($dindo . '<span class="new-tip-button">
          ' . t('Send notification if your removed') . '
          </span>' , '#href', array(
            'html' => TRUE,
            'external' => TRUE,
            'attributes' => array(
              'rel' => 'tooltip',
              'data-placement' => 'right',
            ),
          ));
        }
        print $dindon_r;
        drupal_exit();
      }
    }
  }
  else {
    print 'user';
    drupal_exit();
  }
}

/**
 * Sending messages to users about the withdrawal of the reservation.
 */
function realty_sending_messages_to_users($node) {
  $module = 'realty';
  $key = 'key';
  $language = 'ru';
  $params = array();
  $from = variable_get('site_mail');
  $send = FALSE;
  foreach ($node->field_user_signal[LANGUAGE_NONE] as $uid) {
    $user = user_load($uid['target_id']);
    $message = drupal_mail($module, $key, $user->mail, $language, $params, $from, $send);
    $message['subject'] = 'Уведомление о снятии бронирования!';
    $message['body'] = array();
    $message['body'][] = theme('sending_messages', array('node' => $node));
    $system = drupal_mail_system($module, $key);
    $message = $system->format($message);
    $message['result'] = $system->mail($message);
  }
  return TRUE;
}



/**
 * Implement hook_node_presave.
 */
function realty_node_presave($node) {
  if ($node->type == 'stock') {
    if (!empty($node->field_complex_stock)) {
      $complex = node_load($node->field_complex_stock['und'][0]['target_id']);
      $complex->field_stock['und'][0]['value'] = 1;
      field_attach_update('node', $complex);
    }
  }

  if ($node->type == 'apartament') {
    if ($node->field_status['und'][0]['value'] == 0) {
      $node->field_hiden_status[LANGUAGE_NONE][0]['value'] = 0;
    }
    if ($node->field_hiden_status[LANGUAGE_NONE][0]['value'] == 0 && $node->field_status[LANGUAGE_NONE][0]['value'] == 1) {
      $node->field_hiden_status[LANGUAGE_NONE][0]['value'] = 1;
      if (realty_sending_messages_to_users($node) == TRUE) {
        unset($node->field_user_signal['und']);
      }
    }
    if (!isset($node->field_price[LANGUAGE_NONE][0]['value'])) {
        $node->field_price[LANGUAGE_NONE][0]['value'] = intval($node->field_full_cost['und'][0]['value'] /
            $node->field_gross_area['und'][0]['value']);
    }
  }

}

/**
 * Implement hook form_alter.
 */
function realty_form_user_profile_form_alter(&$form, &$form_id) {
  global $user;

  if ($user->uid != 1) {
    $form['#theme'][0] = 'realty_user_profile_form';
  }
}

/**
 * Page callback to /get_id_apartment.
 */
function realty_get_id_apartment() {
  global $user;

  if ($user->uid !=0 ) {
    $account = user_load($user->uid);
    $node = node_load($_GET['nid']);
    $flag = FALSE;
    if (isset($account->field_received_id)) {
      if (!isset($account->field_received_id[LANGUAGE_NONE])) {
        $account->field_received_id = array(
          LANGUAGE_NONE => array(),
        );
      }
      foreach ($account->field_received_id[LANGUAGE_NONE] as $val) {
        if ($val['target_id'] == $node->nid) {
          $flag = TRUE;
          break;
        }
      }

      if ($flag == FALSE) {
        array_push($account->field_received_id[LANGUAGE_NONE], array('target_id' => $node->nid));
        user_save($account);
      }
      realty_generation_pdf_apartment($node);
    }
  }
  else {
    print 'user';
  }
  drupal_exit();
}

/**
 * Page callback to /get_id_apartment.
 */
function realty_apartment_comparison() {
  global $user;

  $account = user_load($user->uid);
  if ($user->uid != 0 ) {
    $node = node_load($_POST['nid']);
    $flag = FALSE;
    if (isset($account->field_apartment_comparison)) {
      if (!isset($account->field_apartment_comparison[LANGUAGE_NONE])) {
        $account->field_apartment_comparison = array(
          LANGUAGE_NONE => array(),
        );
      }
      foreach ($account->field_apartment_comparison[LANGUAGE_NONE] as $val) {
        if ($val['target_id'] == $node->nid) {
          $flag = TRUE;
          break;
        }
      }

      if ($flag == FALSE) {
        array_push($account->field_apartment_comparison[LANGUAGE_NONE], array('target_id' => $node->nid));
        user_save($account);

        $_POST['apartment'] == 0 ? $path = REALTY_FRONT_THEME_PATH . '/images/ready.svg' :
          $path = REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg';

        if ($_POST['apartment'] == 0) {
          $add = theme('image', array(
            'path' => REALTY_FRONT_THEME_PATH . '/images/ready.svg',
            'attributes' => array(
              'class' => array('add'),
            ),
          ));

          $add_r = l($add , '#href', array(
            'html' => TRUE,
            'external' => TRUE,
            'attributes' => array(
              'title' => t('Apartment in comparison'),
              'data-placement' => 'right',
              'rel' => 'tooltip',
              'class' => array('added-comparison'),
            ),
          ));
        }
        else {
          $add = theme('image', array(
            'path' => REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg',
            'attributes' => array(
              'class' => array(''),
            ),
          ));

          $add_r = l($add . '<div class="tip-button" id="comparison">
        ' . t('added to comparison') . '
        </div>' , '#href', array(
            'html' => TRUE,
            'external' => TRUE,
            'attributes' => array(
              'class' => array('added-comparison'),
            ),
          ));
        }

         print $add_r;
      }

      else {
        print TRUE;
      }
      drupal_exit();
    }
  }
}

/*
 *Page callback to /get_developer_complex.
 */
function realty_get_developer_complex() {
  if (isset($_POST['developer'])) {
    foreach ($_POST['developer'] as $value) {
      $developer_id[] = $value;
    }
    $complexes = realty_get_complex_current_city($developer_id, $_POST['city']);
  }
  else {
    $complexes = realty_get_complex_current_city(null, $_POST['city']);
  }
  $options = '';
  if (!empty($complexes)) {
    foreach ($complexes as $key => $complex) {
      if ($_POST['map']) {
        $options['modal'] .= '<div class="col-xs-4">
          <li>
            <input type="checkbox" id="id-map-complex-' . $key . '" class="inlineCheckbox1 CheckboxMapComplex" value="' . $key . '">
            <label for="id-map-complex-' . $key . '">' . $complex . '</label>
        </li>
      </div>';
        $options['select'] .= '<option value=' . $key . '>' . $complex . '</option>';
      }
      else {
        $options['modal'] .= '<div class="col-xs-4">
            <li>
              <input type="checkbox" id="id-complex-' . $key . '" class="inlineCheckbox1 CheckboxComplex complex-' . $key . '" value="' . $key . ';' . $complex . '">
              <label for="id-complex-' . $key . '">' . $complex . '</label>
          </li>
        </div>';
        $options['select'] .= '<option value=' . $key . '>' . $complex . '</option>';
      }
    }
  }
  print json_encode($options);
  drupal_exit();
}


/**
 * Get options the current city
 */
function realty_get_options_current_city($option) {

  $city = menu_get_object('taxonomy_term', 2);
  if ($city == NULL) {
    $tid = arg(1);
    $city = taxonomy_term_load($tid);
  }
  $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];
  $view = views_get_view('search');
  if ($option == 'area') {
    $view->set_display('search_area');
    $view->display_handler->options['filters']['field_area_city_tid']['value'] = $city_tid;
  }
  if ($option == 'metro') {
    $view->set_display('search_metro');
    $view->display_handler->options['filters']['field_city_metro_tid']['value'] = $city_tid;
  }
  $view->pre_execute(array());
  $view->display_handler->preview();
  $view->post_execute();

  foreach ($view->result as $value) {
    $options[$value->tid] = $value->taxonomy_term_data_name;
  }

  isset($options) ?  : $options = NULL;

  return $options;
}


/**
 * Get developers the current city
 */
function realty_get_developer_current_city() {
  $city = menu_get_object('taxonomy_term', 2);
  if ($city == NULL) {
    $tid = arg(1);
    $city = taxonomy_term_load($tid);
  }
  $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];
  $view = views_get_view('term_view');
  $view->set_display('developers_search');
  $view->display_handler->options['arguments']['tid']['default_argument_options']['argument'] = $city_tid;
  $view->pre_execute(array());
  $view->display_handler->preview();
  $view->post_execute();
  foreach ($view->result as $value) {
    $developer_option[$value->tid] = $value->_field_data['tid']['entity']->name;
  }

  isset($developer_option) ?  : $developer_option = NULL;

  return $developer_option;
}

/**
 * Get complex the current city
 */
function realty_get_complex_current_city($developers = NULL, $city_tid = NULL) {
  $city = menu_get_object("taxonomy_term", 2);

  if ($city == NULL) {
    $tid = arg(1);
    $city = taxonomy_term_load($tid);
  }

  if (isset($_GET['field_city_tid']) || $city) {
    $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];
  }

  $view = views_get_view('complex');
  if ($developers != NULL && $city == NULL) {
    $view->set_display('complex_developers');
    unset($view->display_handler->options['filters']['field_complex_developer_tid']['value']);
    foreach ($developers as $value) {
      $view->display_handler->options['filters']['field_complex_developer_tid']['value'][$value] = $value;
    }
  }

  else {
    $view->set_display('complexs_search');
    $view->display_handler->options['arguments']['tid']['default_argument_options']['argument'] = $city_tid;
  }

  $view->pre_execute(array());
  $view->display_handler->preview();
  $view->post_execute();
  $complex_option = array();
  foreach ($view->result as $value) {
    $complex_option[$value->nid] = $value->node_title;
  }

  isset($complex_option) ?  : $complex_option = NULL;

  return $complex_option;
}

/**
 * Generate pdf file id apartments.
 */
function realty_generation_pdf_apartment($node) {
  $html = theme('id_apartment_pdf', array('node' => $node));
  $error = FALSE;

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf;
    $file_path = '/var/www/realty/sites/default/files/tmp/' . time() . '.html';
    if (file_put_contents($file_path, $html)) {
      $pdf->addPage($file_path);
      $pdf_path = "/var/www/realty/sites/default/files/pdf/id_apartment-$node->nid.pdf";
      $pdf_file = "/sites/default/files/pdf/id_apartment-$node->nid.pdf";
      if (!$pdf->saveAS($pdf_path)) {
        $error = TRUE;
      }
      unlink($file_path);
    }
    else {
      $error = TRUE;
    }
  }
  else {
    $error = TRUE;
  }

  if ($error) {
    print $html;
  }

  print $pdf_file;

  drupal_exit();
}

/**
 * Form builder for search map form.
 */
function realty_realty_comment_form($form, $form_state) {

  $form['body'] = array(
    '#title' => 'body',
    '#type' => 'textfield',
    '#rows' => 6,
    'attributes' => array(
      'class' => array('form-control', 'comment-textarea'),
    ),
  );

  $form['#theme'][] = 'realty_comment_form';

  return $form;
}


/**
 * Form builder for search map form.
 */
function realty_search_map_form($form, $form_state) {

  $category_option = realty_options_search('category');

  $form['category'] = array(
    '#type' => 'select',
    '#title' => 'Category',
    '#name' => 'category[]',
    '#options' =>  $category_option,
    '#attributes'  => array(
      'id' => 'map-filter',
      'multiple' => 'multiple',
      'class' => array('maps'),
    ),
  );

  return $form;
}

/**
 * Options to search for apartments.
 */

function realty_options_search($option) {

  switch ($option) {
    case 'room' :
      return array(
        '1c' => '1c комната',
        '2c' => '2c комнаты',
        '3c' => '3c комнаты',
        '4c' => '4c комнаты',
        '5c' => '5c комнат',
        '1' => '1 комнатa',
        '2' => '2 комнаты',
        '3' => '3 комнаты',
        '4' => '4 комнаты',
        '5' => '5 комнат',
      );

    case 'quarter' :
      return array(
      '1' => '1 квартал',
      '2' => '2 квартал',
      '3' => '3 квартал',
      '4' => '4 квартал',
      );

    case 'masonry' :
      return array(
      '1' => 'Кирпич',
      '2' => 'Монолит',
      );

    case 'category' :
      return array(
      '1' => 'Эконом',
      '2' => 'Комфорт',
      '3' => 'Бизнес',
      );
    case 'balcony' :
      return array(
        '1' => 'Балкон',
        '2' => 'Лоджия',
      );
  }
}

/**
 * Form builder for search form.
 */
function realty_search_form($form, $form_state) {

  $area_option = realty_get_options_current_city('area');
  $metro_option = realty_get_options_current_city('metro');
  $developer_option = realty_get_developer_current_city();
  $complex_option = realty_get_complex_current_city();
  $room_option = realty_options_search('room');
  $quarter_option = realty_options_search('quarter');
  $masonry_option = realty_options_search('masonry');
  $balcony_option = realty_options_search('balcony');
  $category_option = realty_options_search('category');
  $city = menu_get_object('taxonomy_term', 2);

  $form['city'] = array(
    '#type' => 'hidden',
    '#title' => 'city',
    '#value' => isset($_GET['field_city_tid']) ? $_GET['field_city_tid'] : $city->tid,
  );

  $form['area'] = array(
    '#type' => 'select',
    '#title' => 'Area',
    '#name' => 'area[]',
    '#options' => $area_option,
    '#default_value' => isset($_GET['area']) ? $_GET['area'] : 0,
    '#attributes' => array(
      'id' => 'area',
      'multiple' => 'multiple',
    ),
  );

  $form['metro'] = array(
    '#type' => 'select',
    '#title' => 'metro',
    '#name' => 'metro[]',
    '#options' => $metro_option,
    '#default_value' => isset($_GET['metro']) ? $_GET['metro'] : 0,
    '#attributes' => array(
      'id' => 'metro',
      'multiple' => 'multiple',
    ),
  );

  $form['masonry'] = array(
    '#type' => 'select',
    '#title' => 'Masonry',
    '#name' => 'masonry[]',
    '#options' => $masonry_option,
    '#default_value' => isset($_GET['masonry']) ? $_GET['masonry'] : 0,
    '#attributes' => array(
      'id' => 'wall_type',
      'multiple' => 'multiple',
      'class' => array('ss'),
    ),
  );


  $form['balcony'] = array(
    '#type' => 'select',
    '#title' => 'balcony',
    '#name' => 'balcony[]',
    '#options' => $balcony_option,
    '#attributes' => array(
      'id' => 'balkon',
      'multiple' => 'multiple',
      'class' => array('ss'),
    ),
  );

  $form['category'] = array(
    '#type' => 'select',
    '#title' => 'Category',
    '#name' => 'category[]',
    '#options' => $category_option,
    '#default_value' => isset($_GET['category']) ? $_GET['category'] : 0,
    '#attributes' => array(
      'id' => 'cat',
      'multiple' => 'multiple',
      'class' => array('ss mini-ss'),
    ),
  );

  $form['floor'] = array(
    '#type' => 'textfield',
    '#title' => 'floor',
    '#attributes' => array(
      'id' => 'floor',
      'maxlength' => 2,
      'class' => array('search-input',
        'mini-width',
        'floor',
      ),
    ),
  );

  $form['room'] = array(
    '#type' => 'select',
    '#title' => 'Number of room',
    '#name' => 'room[]',
    '#options' => $room_option,
    '#attributes' => array(
      'id' => 'room',
      'multiple' => 'multiple',
    ),
  );

  $form['sq'] = array(
    '#type' => 'hidden',
    '#title' => 'Sq from',
    '#attributes' => array(
      'class' => array('ion-slider', 'sq'),
    ),
  );

  $form['price'] = array(
    '#type' => 'hidden',
    '#title' => 'Price from',
    '#attributes' => array(
      'class' => array('ion-slider', 'price'),
    ),
  );

  $form['parking'] = array(
    '#type' => 'checkbox',
    '#title' => 'Parking',
    '#attributes' => array(
      'id ' => 'parking',
    ),
  );

  $form['coast'] = array(
    '#type' => 'hidden',
    '#title' => 'Coast',
    '#attributes' => array(
      'class' => array('ion-slider', 'coast'),
    ),
  );

  $form['developer'] = array(
    '#type' => 'select',
    '#title' => 'Developer',
    '#name' => 'developer[]',
    '#options' => $developer_option,
    '#attributes' => array(
      'id' => 'developer',
      'multiple' => 'multiple',
    ),
  );

  $form['complex'] = array(
    '#type' => 'select',
    '#title' => 'Complex',
    '#name' => 'complex[]',
    '#options' => $complex_option,
    '#attributes' => array(
      'id' => 'complex',
      'multiple' => 'multiple',
    ),
  );

  $form['quarter'] = array(
    '#type' => 'select',
    '#title' => 'Quarter',
    '#name' => 'quarter[]',
    '#options' => $quarter_option,
    '#attributes' => array(
      'id' => 'date',
      'multiple' => 'multiple',
      'class' => array('ss mini-ss'),
    ),
  );

  $form['year'] = array(
    '#type' => 'textfield',
    '#title' => 'Year',
    '#attributes' => array(
      'class' => array('search-input ear'),
      'placeholder' => t('Year'),
      'maxlength' => '4',
    ),
  );

  $form['#theme'][] = 'search_form';

  return $form;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function realty_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panels') {
    return "plugins/$plugin_type";
  }

  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return "plugins/content_types";
  }
}

/**
 * Checking apartments in comparison.
 */
function realty_checking_apartments_comparison($nid) {
  global $user;
  $account = user_load($user->uid);

  $flag = FALSE;
  if (!empty($account->field_apartment_comparison)) {
    foreach ($account->field_apartment_comparison[LANGUAGE_NONE] as $apartment) {
      if ($apartment['target_id'] == $nid) {
        $flag = TRUE;
        break;
      }
    }
  }

  return $flag;
}

/**
 * Check subscription status tracking
 */
function realty_check_status_apartment_user($uid, $nid) {
    if ($uid != 0) {
        $node = node_load($nid);
        $flag = FALSE;
        if (!empty($node->field_user_signal[LANGUAGE_NONE])) {
            foreach ($node->field_user_signal[LANGUAGE_NONE] as $value) {
                if ($value['target_id'] == $uid) {
                    $flag = TRUE;
                    break;
                }
            }
        }
        else {
            $flag = FALSE;
        }
    }
    else {
        $flag = FALSE;
    }
  return $flag;
}

/**
 * Draw user menu.
 */
function realty_user_menu($account) {

  return theme('realty_user_menu', array('account' => $account));
}

/**
 * Get the current city.
 */
function realty_get_current_city() {

  if (!isset($_GET['q'])) {
    return NULL;
  }

  $entity = explode('/', $_GET['q']);

  if ($entity[0] == 'taxonomy') {
    $term = taxonomy_term_load($entity[2]);
    if ($term->vocabulary_machine_name == 'cities') {
      return $term->name;
    }
    if ($term->vocabulary_machine_name == 'developers' ) {
      $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
      $city = taxonomy_term_load($city_id);
      return $city->name;
    }
  }
  if ($entity[0] == 'node') {
    $node = node_load($entity[1]);
    if ($node->type == 'complex') {
      $dev_id = $node->field_complex_developer[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($dev_id);
      $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
      $city = taxonomy_term_load($city_id);
      return $city->name;
    }
    if ($node->type == 'apartament') {
      $home_id = $node->field_apartament_home[LANGUAGE_NONE][0]['tid'];
      $home = taxonomy_term_load($home_id);
      $complex_id = $home->field_home_complex[LANGUAGE_NONE][0]['target_id'];
      $complex = node_load($complex_id);
      $dev_id = $complex->field_complex_developer[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($dev_id);
      $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
      $city = taxonomy_term_load($city_id);
      return $city->name;
    }
  }
  if ($entity[0] == 'search') {
    $city = taxonomy_term_load($entity[1]);
    return $city->name;
  }
}

/**
 * Form builder for filter form complex apartments.
 */
function realty_filter_complex_apartment_form($form, $form_state) {
  $arg_0 = arg('0');
  $arg_1 = arg('1');
  if ($arg_1 == 'term' || $arg_0 == 'developer') {
    $arg_1 == 'term' ? $tid = arg('2') :  $tid = $arg_1;
    $homes = views_get_view_result('term_view', 'homes_developer', $tid);
  }
  else {
    $node_id = arg('1');
    $node = node_load($node_id);
    if ($node->type == 'apartament') {
      $home = taxonomy_term_load($node->field_apartament_home['und'][0]['tid']);
      $nid = $home->field_home_complex['und'][0]['target_id'];
    }
    else {
      $nid = $node->nid;
    }
    $homes = views_get_view_result('term_view', 'homes_complex', $nid);
  }
  foreach ($homes as $key => $home) {
    $options[$home->tid] = $home->field_field_address_house[0]['rendered']['#markup'];
    $sections[$home->field_field_address_house[0]['rendered']['#markup']]
    [$home->field_field_number_section[0]['raw']['value'] . ':' . $home->tid] =
      $home->field_field_number_section[0]['raw']['value'];
  }
  $form['address'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#multiple' => TRUE,
    '#size' => 5,
    '#attributes' => array(
      'class' => array('cf'),
      'id' => 'filter-form-address',
    ),
  );

  $form['sections'] = array(
    '#type' => 'select',
    '#options' => $sections,
    '#multiple' => TRUE,
    '#size' => 5,
    '#attributes' => array(
      'class' => array('cf'),
      'id' => 'filter-form-section',
    ),
  );

  return $form;

}


/**
 * Implement hook_form_alter.
 */
function realty_form_views_exposed_form_alter(&$form, &$form_state) {
  $city = menu_get_object('taxonomy_term', 2);
  if ($city == NULL) {
    $city = taxonomy_term_load(arg(1));
  }
  $a = arg(0);
  if ($form['#id'] == 'views-exposed-form-apartments-apartment-complex' ||
    $form['#id'] == 'views-exposed-form-apartments-apartment-developer') {
    if (arg(0) != 'admin') {
      $form['#theme'] = 'realty_views_exposed_form';
    }
  }

  if (arg(0) != 'search') {
    if ($form['#id'] == 'views-exposed-form-apartments-result-search') {
      $form['#action'] = '/search/' . $city->tid;
      $form['#theme'] = 'realty_main_search_form';
    }
  }
  elseif (arg(0) == 'search') {
    $form['field_city_tid']['#value'] = $city->tid;
  }
}

/**
 * Get a picture of a small logo
 */
function realty_get_image_micro_logo() {
  return theme('image', array(
    'path' => REALTY_FRONT_THEME_PATH . '/images/micrologo.png',
    'attributes' => array(
      'class' => array('micrologo'),
    ),
  ));
}

function realty_get_image_close() {
  return theme('image', array(
    'path' => REALTY_FRONT_THEME_PATH . '/images/close.png',
    'title' => t('Close'),
  ));
}

/**
 * Implement hook_form_alter.
 */
function realty_form_alter(&$form, &$form_state, $form_id) {
  $a = 1;
  if ($form_id == 'user_login') {
    $form['#theme'][] = 'realty_user_login_form';
  }
  if ($form_id == 'user_register_form') {
    $form['#theme'][] = 'realty_user_register_form';
  }
}

function realty_get_manager_developer() {
  $apartment = menu_get_object('node', 1);
  $complex = node_load($apartment->field_apartament_home['und'][0]['taxonomy_term']->field_home_complex['und'][0]['target_id']);
  $managers = views_get_view_result('term_view', 'managers_developer', $complex->field_complex_developer['und'][0]['tid']);
  foreach ($managers as $manager) {
    $options_manager[$manager->field_collection_item_field_data_field_manager_item_id] = $manager->field_field_manager_name[0]['raw']['safe_value'];
  }
  return $options_manager;
}

/**
 * Form builder for filter form booking apartment.
 */
function realty_booking_apartment_form($form, $form_state) {
  global $user;
  $node = menu_get_object('node', 1);
  $account = user_load($user->uid);
  $managers = realty_get_manager_developer();
  $options_payment = array(
    0 => t('in cash'),
    1 => t('payment by installments'),
    2 => t('mortgage')
  );

  $form['apartment'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($account->field_user_name) ? $account->field_user_name[LANGUAGE_NONE][0]['safe_value'] :
        t('name'),
    '#attributes' => array(
      'class' => array('comment-input'),
      'id' => 'name',
    ),
  );

  $form['number_phone'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($account->field_phone_number) ? $account->field_phone_number[LANGUAGE_NONE][0]['safe_value'] :
       NULL,
    '#attributes' => array(
      'placeholder' => t('number phone'),
      'class' => array('comment-input'),
      'id' => 'number_phone',
    ),
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#default_value' => $account->mail,
      '#attributes' => array(
      'class' => array('comment-input'),
      'id' => 'email',
    ),
  );

  $form['documents'] = array(
    '#type' => 'plupload',
    '#title' => t('Upload files'),
    '#plupload_settings' => array(
      'runtimes' => 'html5',
      'chunk_size' => '1mb',
    ),
  );;

  $form['managers'] = array(
    '#type' => 'radios',
    '#title' => t('Select manager'),
    '#options' => $managers,
  );

  $form['payment'] = array(
    '#type' => 'radios',
    '#title' => t('method of purchase'),
    '#options' => $options_payment,
  );

  $form['number_contract'] = array(
    '#type' => 'textfield',
    '#title' => t('Номер договора'),
    '#attributes' => array(
      'class' => array('comment-input'),
      'id' => 'number_contract',
    ),
  );

  $form['bank_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Наименование банка'),
    '#attributes' => array(
      'class' => array('comment-input'),
      'id' => 'bank_name',
    ),
  );

  $form['sum'] = array(
    '#type' => 'textfield',
    '#title' => t('Сумма'),
    '#attributes' => array(
      'class' => array('comment-input'),
      'id' => 'sum',
    ),
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('col-xs-4', 'col-xs-offset-4', 'comment-button', 'margin-bottom-50', 'use-ajax-submit'),
    ),
    '#ajax' => array(
      'callback' => 'realty_booking_apartment_form_submit',
    ),
    '#value' => t('Booking'),
  );

  $form['#validate'][] = 'realty_booking_apartment_form_validate';
  $form['#theme'] = 'realty_booking_apartment_form';

  return $form;
}


/**
 * Form validate callback.
 */
function realty_booking_apartment_form_validate($form, &$form_state) {
  $commands = array();
  $errors = '';

  if (empty($form_state['values']['number_phone'])) {
    $errors = t('Fill in all the fields');
      $commands[] = ajax_command_replace(
        '#div-info-box',
        '<div class="messages error booking-modal">' . $errors . '</div>'
      );
      $commands[] = ajax_command_invoke('input[name="number_phone"]', 'addClass', array('error'));
  }
  if (empty($form_state['values']['name'])) {
    $errors = t('Fill in all the fields');
      $commands[] = ajax_command_replace(
        '#div-info-box',
        '<div class="messages error booking-modal">' . $errors . '</div>'
      );
      $commands[] = ajax_command_invoke('input[name="name"]', 'addClass', array('error'));
  }
  if (empty($form_state['values']['email'])) {
    $errors = t('Fill in all the fields');
      $commands[] = ajax_command_replace(
        '#div-info-box',
        '<div class="messages error booking-modal">' . $errors . '</div>'
      );
      $commands[] = ajax_command_invoke('input[name="email"]', 'addClass', array('error'));
  }
  if (empty($form_state['values']['documents'])) {
    $errors = t('Fill in all the fields');
    $commands[] = ajax_command_replace(
      '#div-info-box',
      '<div class="messages error booking-modal">' . $errors . '</div>'
    );
  }
  if (!empty($errors)) {
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }

}
/**
 *  Form submit callback
 */
function realty_booking_apartment_form_submit($form, &$form_state) {
  $options = array(
    'name' => $form_state['values']['name'],
    'number_phone' => $form_state['values']['number_phone'],
    'email' => $form_state['values']['email'],
    'documents' => $form_state['values']['documents'],
    'manager' => $form_state['values']['managers'],
    'apartment' => $form_state['values']['apartment'],
    'payment' => $form_state['values']['payment'],
    'number_contract' => $form_state['values']['number_contract'],
    'bank_name' => $form_state['values']['bank_name'],
    'sum' => $form_state['values']['sum'],
  );

  $node = realty_creation_node_booking($options);
  realty_messages_booking_manager($node);
  realty_change_status_apartment($form_state['values']['apartment']);

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_html('#ajax-div-modal-booking-form', 'Квартира успешно забронирована'),
    ),
  );

  drupal_exit();
}

/**
 * Sending messages booking manager builder.
 */
function realty_messages_booking_manager($node) {
  $module = 'realty';
  $from = variable_get('site_mail');
  $manager_email = 'usolceww@yandex.ru';//$node->field_email_manager[LANGUAGE_NONE][0]['value'];
  foreach ($node->field_booking_document[LANGUAGE_NONE]  as $val) {
    $files[] = file_load($val['fid']);
  }
  $to = $manager_email;
  $token = time();

  $message = array(
    'id' => $module . '_' . $token,
    'to' => $to,
    'subject' => 'Заявка на бронирование!',
    'body' => theme('booking_request', array('node' => $node)),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8',
    ),
  );
  foreach ($files as $file) {
    $message['params']['attachments'][] = array(
      'path' => file_stream_wrapper_get_instance_by_uri($file->uri)->realpath(),
      'filecontent' => file_get_contents($file->uri),
      'filename' => $file->filename,
      'mime' => $file->filemime,
      'encoding' => 'base64',
      'disposition' => 'attachment',
      'list' => TRUE,
    );
  }
  $system = drupal_mail_system($module, $token);
  $message = $system->format($message);

  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 *  Found this trick on theoleschool.com.
 *
 *  Description: Allows the view developer to specify the query
 *  group by action in the query comments. Great way to force the
 *  removal of duplicates.
 *
 *  Just go into your query comments and type in "groupby:" with
 *  that colon followed by the field you want to group by.
 *
 *  Examples...
 *  groupby:node.nid
 *  groupby:file_managed_file_usage.fid
 *
 *  Ref-Comment: http://theoleschool.com/comment/496#comment-496
 *  Ref-Article: http://theoleschool.com/blog/using-hookviewsalter-add-group-statement
 */
function realty_query_alter(QueryAlterableInterface $query) {
  if ($query->hasTag('views')) {
    static $count;
    $view =& $query->getMetaData('view');

    if (strstr($groupby = $view->query->options['query_comment'], 'groupby')) {
      list($action, $field) = explode(':', $groupby);

      if (strlen($field) > 0) {
        $query->groupBy($field);
      }
    }
  }
}